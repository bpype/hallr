// SPDX-License-Identifier: AGPL-3.0-or-later
// Copyright (c) 2025 lacklustr@protonmail.com https://github.com/eadf
// This file is part of the hallr crate.

use crate::{
    HallrError,
    command::{ConfigType, OwnedModel},
};

#[test]
fn test_baby_shark_simplify_1() -> Result<(), HallrError> {
    let mut config = ConfigType::default();
    let _ = config.insert("MIN_FACES_COUNT".to_string(), "10000".to_string());
    let _ = config.insert(
        "ERROR_THRESHOLD".to_string(),
        "0.10000000149011612".to_string(),
    );
    let _ = config.insert("mesh.format".to_string(), "triangulated".to_string());
    let _ = config.insert("command".to_string(), "baby_shark_simplify".to_string());

    let owned_model_0 = OwnedModel {
        world_orientation: OwnedModel::identity_matrix(),
        vertices: vec![
            (0.0, 0.0, -1.0).into(),
            (0.7236073, -0.5257253, -0.44721952).into(),
            (-0.27638802, -0.85064924, -0.44721985).into(),
            (-0.8944262, 0.0, -0.44721562).into(),
            (-0.27638802, 0.85064924, -0.44721985).into(),
            (0.7236073, 0.5257253, -0.44721952).into(),
            (0.27638802, -0.85064924, 0.44721985).into(),
            (-0.4985814, -0.3508636, 0.82351863).into(),
            (-0.7236073, 0.5257253, 0.44721952).into(),
            (0.27638802, 0.85064924, 0.44721985).into(),
            (0.8944262, 0.0, 0.44721562).into(),
            (0.0, 0.0, 1.0).into(),
            (-0.16245556, -0.49999526, -0.8506544).into(),
            (0.42532268, -0.3090114, -0.8506542).into(),
            (0.26286882, -0.80901164, -0.52573764).into(),
            (0.85064787, 0.0, -0.5257359).into(),
            (0.42532268, 0.3090114, -0.8506542).into(),
            (-0.5257298, 0.0, -0.8506517).into(),
            (-0.6881894, -0.49999693, -0.5257362).into(),
            (-0.16245556, 0.49999526, -0.8506544).into(),
            (-0.6881894, 0.49999693, -0.5257362).into(),
            (0.26286882, 0.80901164, -0.52573764).into(),
            (0.95105785, -0.30901262, 0.0).into(),
            (0.95105785, 0.30901262, 0.0).into(),
            (0.0, -0.99999994, 0.0).into(),
            (0.5877856, -0.8090167, 0.0).into(),
            (-0.95105785, -0.30901262, 0.0).into(),
            (-0.5877856, -0.8090167, 0.0).into(),
            (-0.5877856, 0.8090167, 0.0).into(),
            (-0.95105785, 0.30901262, 0.0).into(),
            (0.5877856, 0.8090167, 0.0).into(),
            (0.0, 0.99999994, 0.0).into(),
            (0.6881894, -0.49999693, 0.5257362).into(),
            (-0.4563082, -0.3231407, 0.80542207).into(),
            (-0.85064787, 0.0, 0.5257359).into(),
            (-0.26286882, 0.80901164, 0.52573764).into(),
            (0.6881894, 0.49999693, 0.5257362).into(),
            (0.16245556, -0.49999526, 0.85065436).into(),
            (0.5257298, 0.0, 0.8506517).into(),
            (-0.42532268, -0.3090114, 0.8506542).into(),
            (-0.42532268, 0.3090114, 0.8506542).into(),
            (0.16245556, 0.49999526, 0.85065436).into(),
        ],
        indices: vec![
            0, 13, 12, 1, 13, 15, 0, 12, 17, 0, 17, 19, 0, 19, 16, 1, 15, 22, 2, 14, 24, 3, 18, 26,
            4, 20, 28, 5, 21, 30, 1, 22, 25, 2, 24, 27, 3, 26, 29, 4, 28, 31, 5, 30, 23, 6, 32, 37,
            7, 33, 39, 8, 34, 40, 9, 35, 41, 10, 36, 38, 38, 41, 11, 38, 36, 41, 36, 9, 41, 41, 40,
            11, 41, 35, 40, 35, 8, 40, 40, 39, 11, 40, 34, 39, 34, 7, 39, 39, 37, 11, 39, 33, 37,
            33, 6, 37, 37, 38, 11, 37, 32, 38, 32, 10, 38, 23, 36, 10, 23, 30, 36, 30, 9, 36, 31,
            35, 9, 31, 28, 35, 28, 8, 35, 29, 34, 8, 29, 26, 34, 26, 7, 34, 27, 33, 7, 27, 24, 33,
            24, 6, 33, 25, 32, 6, 25, 22, 32, 22, 10, 32, 30, 31, 9, 30, 21, 31, 21, 4, 31, 28, 29,
            8, 28, 20, 29, 20, 3, 29, 26, 27, 7, 26, 18, 27, 18, 2, 27, 24, 25, 6, 24, 14, 25, 14,
            1, 25, 22, 23, 10, 22, 15, 23, 15, 5, 23, 16, 21, 5, 16, 19, 21, 19, 4, 21, 19, 20, 4,
            19, 17, 20, 17, 3, 20, 17, 18, 3, 17, 12, 18, 12, 2, 18, 15, 16, 5, 15, 13, 16, 13, 0,
            16, 12, 14, 2, 12, 13, 14, 13, 1, 14,
        ],
    };

    let models = vec![owned_model_0.as_model()];
    let result = super::process_command(config, models)?;

    assert_eq!(result.1.len() % 3, 0);

    let number_of_vertices = result.0.len();
    for t in result.1.chunks_exact(3) {
        assert_ne!(t[0], t[1]);
        assert_ne!(t[0], t[2]);
        assert_ne!(t[1], t[2]);

        assert!(
            t[0] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        );
        assert!(
            t[1] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        );
        assert!(
            t[2] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        )
    }
    assert_eq!(41, result.0.len()); // vertices
    assert_eq!(234, result.1.len()); // indices
    Ok(())
}
