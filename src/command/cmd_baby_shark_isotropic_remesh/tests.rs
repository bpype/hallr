// SPDX-License-Identifier: AGPL-3.0-or-later
// Copyright (c) 2025 lacklustr@protonmail.com https://github.com/eadf
// This file is part of the hallr crate.

use crate::{
    HallrError,
    command::{ConfigType, OwnedModel},
    ffi::{MESH_FORMAT_TAG, MeshFormat},
};

#[test]
fn test_baby_shark_isotropic_remesh_1() -> Result<(), HallrError> {
    let mut config = ConfigType::default();
    let _ = config.insert(
        "command".to_string(),
        "baby_shark_isotropic_remesh".to_string(),
    );
    let _ = config.insert("COLLAPSE_EDGES".to_string(), "True".to_string());
    let _ = config.insert("FLIP_EDGES".to_string(), "True".to_string());
    let _ = config.insert("SHIFT_VERTICES".to_string(), "True".to_string());
    let _ = config.insert("PROJECT_VERTICES".to_string(), "True".to_string());
    let _ = config.insert(
        "TARGET_EDGE_LENGTH".to_string(),
        "0.10000000149011612".to_string(),
    );
    let _ = config.insert(
        MESH_FORMAT_TAG.to_string(),
        MeshFormat::Triangulated.to_string(),
    );
    let _ = config.insert("SPLIT_EDGES".to_string(), "True".to_string());
    let _ = config.insert("ITERATIONS_COUNT".to_string(), "10".to_string());

    let owned_model_0 = OwnedModel {
        world_orientation: OwnedModel::identity_matrix(),
        vertices: vec![
            (0.0, 0.11755705, 0.16180341).into(),
            (0.0, 0.19021131, 0.0618034).into(),
            (0.0, 0.19021131, -0.0618034).into(),
            (0.0, 0.11755705, -0.16180341).into(),
            (0.1118034, 0.036327124, 0.16180341).into(),
            (0.1809017, 0.058778524, 0.0618034).into(),
            (0.1809017, 0.058778524, -0.0618034).into(),
            (0.1118034, 0.036327124, -0.16180341).into(),
            (0.069098294, -0.095105655, 0.16180341).into(),
            (0.1118034, -0.15388419, 0.0618034).into(),
            (0.1118034, -0.15388419, -0.0618034).into(),
            (0.069098294, -0.095105655, -0.16180341).into(),
            (0.0, 0.0, 0.2).into(),
            (-0.06909831, -0.09510565, 0.16180341).into(),
            (-0.11180341, -0.15388417, 0.0618034).into(),
            (-0.11180341, -0.15388417, -0.0618034).into(),
            (-0.06909831, -0.09510565, -0.16180341).into(),
            (-0.1118034, 0.03632714, 0.16180341).into(),
            (-0.18090169, 0.058778543, 0.0618034).into(),
            (-0.18090169, 0.058778543, -0.0618034).into(),
            (-0.1118034, 0.03632714, -0.16180341).into(),
            (0.0, 0.0, -0.2).into(),
        ],
        indices: vec![
            2, 7, 3, 0, 5, 1, 21, 3, 7, 1, 6, 2, 0, 12, 4, 21, 7, 11, 5, 10, 6, 4, 12, 8, 6, 11, 7,
            4, 9, 5, 21, 11, 16, 9, 15, 10, 8, 12, 13, 11, 15, 16, 8, 14, 9, 21, 16, 20, 14, 19,
            15, 13, 12, 17, 15, 20, 16, 14, 17, 18, 21, 20, 3, 18, 2, 19, 17, 12, 0, 19, 3, 20, 18,
            0, 1, 2, 6, 7, 0, 4, 5, 1, 5, 6, 5, 9, 10, 6, 10, 11, 4, 8, 9, 9, 14, 15, 11, 10, 15,
            8, 13, 14, 14, 18, 19, 15, 19, 20, 14, 13, 17, 18, 1, 2, 19, 2, 3, 18, 17, 0,
        ],
    };

    let models = vec![owned_model_0.as_model()];
    let result = super::process_command(config, models)?;

    assert_eq!(result.1.len() % 3, 0);

    let number_of_vertices = result.0.len();
    for t in result.1.chunks_exact(3) {
        assert_ne!(t[0], t[1]);
        assert_ne!(t[0], t[2]);
        assert_ne!(t[1], t[2]);

        assert!(
            t[0] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        );
        assert!(
            t[1] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        );
        assert!(
            t[2] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        )
    }
    assert_eq!(33, result.0.len()); // vertices
    assert_eq!(186, result.1.len()); // indices
    Ok(())
}

#[test]
/// this test will crash inside baby_shark
fn test_baby_shark_isotropic_remesh_non_manifold_pinched_vertex() -> Result<(), HallrError> {
    let mut config = ConfigType::default();
    let _ = config.insert("COLLAPSE_EDGES".to_string(), "True".to_string());
    let _ = config.insert("SPLIT_EDGES".to_string(), "True".to_string());
    let _ = config.insert("FLIP_EDGES".to_string(), "True".to_string());
    let _ = config.insert("SHIFT_VERTICES".to_string(), "True".to_string());
    let _ = config.insert("TARGET_EDGE_LENGTH".to_string(), "1.0".to_string());
    let _ = config.insert("ITERATIONS_COUNT".to_string(), "10".to_string());
    let _ = config.insert(
        "command".to_string(),
        "baby_shark_isotropic_remesh".to_string(),
    );
    let _ = config.insert(
        MESH_FORMAT_TAG.to_string(),
        MeshFormat::Triangulated.to_string(),
    );
    let _ = config.insert("PROJECT_VERTICES".to_string(), "True".to_string());

    let owned_model_0 = OwnedModel {
        world_orientation: OwnedModel::identity_matrix(),
        vertices: vec![
            (1.5206425, 0.58345723, 0.9643142).into(),
            (1.5897849, 0.52561975, 0.799575).into(),
            (1.500135, 0.5940459, 0.55235434).into(),
            (0.97954464, 0.49763584, -0.29884493).into(),
            (1.0053191, 0.34755492, -0.29318047).into(),
            (0.94094086, 0.30965972, -0.24078614).into(),
            (0.8870106, 0.11564636, -0.08816016).into(),
            (0.6828432, 0.15238118, -0.08576465).into(),
            (1.0926704, 0.19180894, -0.13936627).into(),
            (1.0887341, 0.28723502, -0.2716959).into(),
            (0.79914474, 0.41366076, -0.16293776).into(),
            (0.90413904, 0.57856345, -0.1403172).into(),
            (0.7020879, -0.024659872, 0.031044364).into(),
            (0.5660691, 0.22150493, -0.005560875).into(),
            (0.6492696, 0.39677906, 0.021399498).into(),
            (0.7420306, 0.48351073, 0.036836505).into(),
            (0.30184793, -0.045595407, 0.16208827).into(),
            (0.46830463, -0.1496203, 0.14794683).into(),
            (0.36938095, 0.13314319, 0.15404773).into(),
            (1.0016699, 0.092324495, 0.10519576).into(),
            (1.1231079, 0.23457456, 0.11168194).into(),
            (0.9024315, 0.5626161, 0.08391893).into(),
            (0.7417016, 0.45096302, 0.19262242).into(),
            (1.334331, 0.7684481, 0.58411825).into(),
            (1.3831298, 0.72603536, 1.0039265).into(),
            (0.5798383, -0.2006259, 0.33456707).into(),
            (0.72826195, -0.10661459, 0.22796679).into(),
            (0.585341, 0.35948348, 0.22796679).into(),
            (0.8948746, 0.43136382, 0.23204291).into(),
            (1.0179982, 0.4161513, 0.2113998).into(),
            (1.2133837, 0.825238, 0.76024973).into(),
            (1.2915225, 0.8058505, 0.9331703).into(),
            (0.8239069, 0.0074481964, 0.31440842).into(),
            (0.190804, 0.0706718, 0.35715497).into(),
            (0.3531103, 0.19236326, 0.35411954).into(),
            (0.6971359, 0.25718665, 0.36509).into(),
            (0.6889987, 0.051296234, 0.46009147).into(),
            (0.6427069, 0.22663856, 0.4291277).into(),
            (0.4897852, -0.24850011, 0.53466654).into(),
            (0.6559439, -0.064596415, 0.5301472).into(),
            (0.2272048, 0.077123165, 0.60035443).into(),
            (0.46471786, 0.19297218, 0.53466654).into(),
            (0.6357794, 0.23629642, 0.53287697).into(),
            (0.6633148, -0.59358776, 1.617805).into(),
            (0.78546286, 0.07594943, 0.5566503).into(),
            (0.8617401, 0.26598597, 0.5365602).into(),
            (0.9458947, 0.14797711, 0.591123).into(),
            (1.3092847, 0.4290545, 0.5799632).into(),
            (0.8356333, 0.39896107, 0.5702647).into(),
            (1.2297797, 0.54201555, 0.540941).into(),
            (1.078052, 0.607816, 0.5792856).into(),
            (0.59154177, -0.18271494, 0.68991435).into(),
            (0.8671546, 0.0030181408, 0.72513723).into(),
            (1.1163182, 0.20820546, 0.66119516).into(),
            (0.40165043, 0.22693372, 0.73219).into(),
            (0.653749, 0.38311148, 0.66153777).into(),
            (1.4335141, 0.43503165, 0.6667429).into(),
            (0.9561014, 0.599911, 0.65818846).into(),
            (0.79278135, 0.5214789, 0.7632431).into(),
            (1.133954, 0.7017031, 0.6198386).into(),
            (0.71926355, -0.118228674, 0.7800262).into(),
            (1.1330724, 0.1949377, 0.82628095).into(),
            (1.4298985, 0.39800334, 0.7800262).into(),
            (0.46768522, -0.33995366, 0.8552618).into(),
            (0.5703044, -0.40736532, 0.9688146).into(),
            (0.6511774, -0.25152302, 0.9431107).into(),
            (0.6164367, -0.024952412, 0.9931468).into(),
            (0.7555032, -0.052247286, 0.8899889).into(),
            (0.92751217, 0.12301707, 0.93661714).into(),
            (0.4374957, 0.21891117, 0.8948989).into(),
            (0.80096674, 0.080247164, 0.97697973).into(),
            (1.1168313, 0.24575591, 0.92976356).into(),
            (0.6656866, 0.3393743, 0.94525266).into(),
            (1.4549942, 0.4469571, 0.87795854).into(),
            (0.7985091, 0.5035901, 0.86810946).into(),
            (1.3084979, 0.44811034, 0.9751754).into(),
            (1.105999, 0.70893717, 0.89055514).into(),
            (0.8698087, 0.46357226, 0.96401644).into(),
            (0.72192097, -0.42159045, 1.1610353).into(),
            (0.82056093, -0.29226708, 1.0818136).into(),
            (0.86136913, -0.10044098, 1.0893602).into(),
            (0.21255922, -0.0390656, 0.99747014).into(),
            (0.75798464, -0.019946575, 1.0292463).into(),
            (0.585711, -0.47134006, 1.2132642).into(),
            (0.5179963, 0.16206646, 0.9856968).into(),
            (0.8924103, 0.2966559, 1.0076025).into(),
            (1.1241865, 0.6166923, 0.97960305).into(),
            (1.29112, 0.5726857, 1.0083845).into(),
            (1.1070085, -0.26481724, 1.2980316).into(),
            (1.0798602, -0.17664218, 1.2110846).into(),
            (0.29235744, -0.07726431, 1.1402895).into(),
            (0.58963394, 0.01722455, 1.2344842).into(),
            (0.835412, 0.02176857, 1.1778016).into(),
            (0.4496603, -0.13397527, 1.3646646).into(),
            (0.5981002, -0.011141062, 1.3764284).into(),
            (0.8136463, 0.08127427, 1.2851589).into(),
            (0.69587946, -0.30181754, 1.47507).into(),
            (0.8924103, -0.3511355, 1.4457407).into(),
            (1.0786748, -0.31531477, 1.388334).into(),
            (0.6293516, -0.17852235, 1.488931).into(),
        ],
        indices: vec![
            0, 1, 2, 3, 4, 5, 5, 6, 7, 5, 8, 6, 8, 5, 9, 10, 5, 7, 5, 4, 9, 10, 3, 5, 11, 3, 10, 7,
            6, 12, 10, 7, 13, 14, 10, 13, 14, 11, 10, 15, 11, 14, 16, 7, 17, 7, 12, 17, 18, 7, 16,
            18, 13, 7, 19, 6, 8, 19, 8, 20, 21, 11, 15, 15, 22, 21, 11, 8, 4, 20, 8, 11, 11, 21,
            20, 2, 23, 24, 0, 2, 24, 25, 17, 12, 26, 25, 12, 6, 26, 12, 6, 19, 26, 14, 13, 18, 27,
            15, 14, 22, 15, 27, 21, 22, 28, 21, 28, 29, 21, 29, 20, 3, 11, 4, 30, 31, 24, 8, 9, 4,
            23, 30, 24, 32, 26, 19, 34, 18, 33, 14, 18, 34, 14, 34, 27, 32, 19, 20, 32, 20, 35, 35,
            20, 29, 28, 35, 29, 22, 35, 28, 32, 25, 26, 36, 25, 32, 35, 36, 32, 35, 27, 34, 37, 36,
            35, 35, 22, 27, 39, 38, 25, 39, 25, 36, 34, 33, 40, 34, 40, 41, 35, 34, 41, 36, 37, 42,
            37, 35, 41, 37, 41, 42, 36, 44, 39, 45, 36, 42, 45, 44, 36, 45, 46, 44, 45, 47, 46, 48,
            45, 42, 49, 45, 48, 49, 47, 45, 50, 49, 48, 49, 2, 47, 23, 49, 50, 23, 2, 49, 39, 51,
            38, 44, 51, 39, 44, 52, 51, 53, 52, 44, 53, 44, 46, 40, 54, 41, 55, 41, 54, 55, 42, 41,
            47, 53, 46, 55, 48, 42, 47, 56, 53, 57, 48, 55, 57, 50, 48, 58, 57, 55, 59, 50, 57, 2,
            56, 47, 2, 1, 56, 59, 23, 50, 30, 23, 59, 52, 60, 51, 53, 61, 52, 53, 62, 61, 58, 55,
            54, 56, 62, 53, 1, 62, 56, 30, 59, 57, 30, 57, 58, 51, 65, 63, 63, 65, 64, 65, 51, 60,
            65, 60, 66, 67, 66, 60, 68, 60, 52, 68, 67, 60, 70, 67, 68, 71, 68, 52, 61, 71, 52, 58,
            54, 69, 58, 69, 72, 61, 62, 71, 73, 71, 62, 74, 58, 72, 75, 71, 73, 1, 73, 62, 58, 74,
            76, 74, 77, 76, 0, 73, 1, 30, 58, 76, 30, 76, 31, 65, 79, 64, 80, 65, 66, 80, 79, 65,
            82, 66, 67, 82, 80, 66, 69, 81, 66, 69, 66, 84, 82, 70, 66, 72, 69, 84, 85, 84, 66, 85,
            66, 70, 85, 70, 68, 72, 84, 85, 72, 85, 77, 85, 68, 71, 85, 71, 75, 77, 74, 72, 77, 85,
            86, 87, 86, 85, 87, 85, 75, 86, 76, 77, 75, 73, 0, 87, 75, 0, 86, 87, 24, 24, 87, 0,
            31, 76, 86, 31, 86, 24, 79, 78, 64, 79, 88, 78, 79, 89, 88, 80, 89, 79, 66, 81, 90, 91,
            66, 90, 82, 66, 92, 92, 66, 91, 80, 82, 92, 94, 90, 93, 91, 90, 94, 91, 95, 92, 97, 83,
            78, 97, 96, 83, 88, 97, 78, 88, 98, 97, 99, 96, 95, 88, 89, 97, 95, 91, 94, 95, 94, 99,
            94, 93, 99, 89, 80, 97, 80, 92, 95, 95, 96, 80, 96, 97, 80, 99, 93, 83, 81, 69, 51, 83,
            90, 64, 51, 63, 81, 90, 81, 63, 64, 78, 83, 63, 64, 90, 38, 51, 40, 54, 40, 51, 25, 38,
            33, 93, 90, 83, 40, 33, 38, 69, 54, 51, 16, 17, 25, 83, 96, 99, 33, 18, 16, 16, 25, 33,
            70, 82, 67,
        ],
    };

    let models = vec![owned_model_0.as_model()];

    let result = super::process_command(config, models)?;
    assert_eq!(result.1.len() % 3, 0);
    assert!(!result.1.is_empty());
    let number_of_vertices = result.0.len();
    assert!(number_of_vertices > 0);

    for t in result.1.chunks_exact(3) {
        assert_ne!(t[0], t[1]);
        assert_ne!(t[0], t[2]);
        assert_ne!(t[1], t[2]);

        assert!(
            t[0] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        );
        assert!(
            t[1] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        );
        assert!(
            t[2] < number_of_vertices,
            "{:?} >= {}",
            t[2],
            number_of_vertices
        )
    }
    //assert_eq!(0,result.0.len()); // vertices
    //assert_eq!(0,result.1.len()); // indices
    Ok(())
}
